/*
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]                                                     
    1 2 3    7 4 1
    4 5 6    8 5 2 
    7 8 9    9 6 3
    Reverse all rows
    7 8 9
    4 5 6
    1 2 3
    Transpose
    7 4 1
    8 5 2
    9 6 3
*/                                                                                        
void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < (n + 1) / 2; i ++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = matrix[n - 1 - j][i];
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];
                matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 -i];
                matrix[j][n - 1 - i] = matrix[i][j];
                matrix[i][j] = temp;
            }
        }
    }


//only shift rotate by  a unit.
/*
Given a 2-dimensional matrix of size ‘N’ x ‘M’, rotate the elements of the matrix clockwise.
For example: 
Input Matrix: [ [ 1, 2, 3 ] 
                [ 4, 5, 6 ] 
                [ 7, 8, 9 ] ]

Output Matrix: [ [ 4, 1, 2 ] 
                 [ 7, 5, 3 ] 
                 [ 8, 9, 6 ] ]

The output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once. 
*/

void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    int rowDiv = n/2;
    int colDiv = m/2;
    int topLeft;
    for(int x=0,y=0; x<rowDiv && y<colDiv; x++, y++)
    {
        topLeft = mat[x][y];
        
        for(int row=x ;row<n-x-1; row++)
             mat[row][y]= mat[row+1][y];
        
        for(int col=y ; col<m-y-1; col++)
            mat[n-x-1][col] =  mat[n-x-1][col+1];
      
        for(int row = n-x-1; row>x; row--)
           mat[row][m-y-1] =  mat[row-1][m-y-1];
        
        for(int col=m-y-1; col>y; col--)
            mat[x][col] = mat[x][col-1];
        
        mat[x][y+1]= topLeft;
    }

}